Git is a version control platform

Gtihub is a code sharing and collaboration platform.



How did viewing a diff between two versions of a file help you see the bug that
was introduced?

Easy way to find the differences between two files. The windows command prompt 'FC' tool returns the sections that are different between the two files.


How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

It would save a lot of time looking for changes.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

Pro - you keep total control and only commit when ready.
	- You can keep logical changes together
	- You can ensure each commit is a completed set of changes
Con - You might forget to commit
	- You could have too many commits making it hard to find chanegs
	- Commit may not be in a very logical place


It's usually a good idea to keep commits small. As the diff between two versions gets bigger, it gets harder to understand and less useful.
A good rule of thumb is to make one commit per logical change. 


Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

Git is a version control system for developers, Google Docs is not.
Therefore, different purpose for different target audience.
When writing software it would be common to make changes in multiple files for the new function, so you would need to see the collection of submitted changes in the same commit. Therefore, Git always commits all files in a repository at the same time. If some files don't have any changes, they're still committed, there will just be no difference from the last version.

How can you use the commands git log and git diff to view the history of files?

git log will show you all of the commits
git diff will show you the changes between commits

How might using version control make you more confident to make changes that
could break something?

Easy to find and undo changes.

Now that you have your workspace set up, what do you want to try using Git for?

Version control!




Cloning a Repository

To clone a repository, run git clone followed by a space and the repository URL.

Asteroids URL

Use the following url to clone the Asteroids repository: https://github.com/udacity/asteroids.git




Git Errors and Warnings Solution

Should not be doing an octopus
Octopus is a strategy Git uses to combine many different versions of code together. This message can appear if you try to use this strategy in an inappropriate situation.

You are in 'detached HEAD' state
HEAD is what Git calls the commit you are currently on. You can “detach” the HEAD by switching to a previous commit, which we’ll see in the next video. Despite what it sounds like, it’s actually not a bad thing to detach the HEAD. Git just warns you so that you’ll realize you’re doing it.

Takeaway We hope these errors and warnings amused you as much as they amused us! Now that you know what kind of errors Git can throw, you’re ready to start checking out previous versions of files with Caroline.



git diff:	Compare two commits, printing each line that is present in one commit but not the other.
git clone:	Make a copy of an entire Git repository, including the histroy, onto your won computer.
git checkout:	Temporarily reset all files ina  repository to their state at the time of a specific commit.
git log:	Show the commits made in a repository, starting with the most recent.



Git command review

Compare two commits, printing each line that is present in one commit but not the other.

git diff will do this. It takes two arguments - the two commit ids to compare. 



Make a copy of an entire Git repository, including the history, onto your own computer.

git clone will do this. It takes one argument - the url of the repository to copy. 



Temporarily reset all files in a directory to their state at the time of a specific commit.

git checkout will do this. It takes one argument - the commit ID to restore. 



Show the commits made in this repository, starting with the most recent.

git log will do this. It doesn't take any arguments


Behavior of git clone

If someone else gives you the location of their directory or repository, you can copy or clone it to your own computer.

This is true for both copying a directory and cloning a repository. 

As you saw in the previous lesson, if you have a URL to a repository, you can copy it to your computer using git clone.

For copying a directory, you weren't expected to know this, but it is possible to copy a directory from one computer to another using the command scp, which stands for "secure copy". The name was chosen because the scp command lets you securely copy a directory from one computer to another. 



The history of changes to the directory or repository is copied.

This is true for cloning a repository, but not for copying a directory. The main reason to use git clone rather than copying the directory is because git clone will also copy the commit history of the repository. However, copying can be done on any directory, whereas git clone only works on a Git repository. 



If you make changes to the copied directory or cloned repository, the original will not change.

This is true for both copying a directory and cloning a repository. In both cases, you're making a copy that you can alter without changing the original. 



The state of every file in the directory or repository is copied.

This is true for both copying a directory and cloning a repository. In both cases, all the files are copied.



